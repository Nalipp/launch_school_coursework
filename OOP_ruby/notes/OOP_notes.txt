What is a class?
  A class is a blueprint for a data type, without defining any data.
  The data a methods within a class are called the members of the class.
  Objects of a class are declared by calling .new

Classes group common behaviors and objects encapsulate state.
The object's state is saved in an object's instance variables.
Instance methods can operate on the instance variables.

What is an object?
  An objects belongs to a class and encapsulates state.

What is the initialize method?
  The initialize method takes parameters and sets them as class variables when the class object is created.
  Don't forget multiple parameters can be initialized like this.
      class Box
         def initialize(w,h)
            @width, @height = w, h
         end
      end

What are accessor/getter methods?
  Accessor/getter methods are methods that allow variables to be accessible outside of a class.

What are setter methods?
  Setter methods allow you to set the value of variables from outside the class.

What are instance methods?
  Instance methods are methods that have access to the instances of the class.

What is a class variable? @@
  A class variable is a variable that is shared with all instances of the class.

What is a base class / super class vs derived class / sub class
  The derived class / sub class inherits rom the base class / super class

What is a module?
  A module is code that can be inherited into a class and allows you to reuse code functionality.
  Multiple modules can be inherited into a class but a class can only inherit from a single sub class.

What is allocate used for?
  Allocate allows you to create a class without initializing any data.

What is the lookup path?
  The lookup path is the order of the class hierarchy and the oder that ruby will search for methods to invoke
  The .ancestors method returns the lookup path and all of the classes that the subclass inherits from

  "The method lookup path is the order in which Ruby will traverse the class hierarchy to look for methods to invoke. For example,
  say you have a Bulldog object called bud and you call: bud.swim. Ruby will first look for a method called swim in the Bulldog class,
  then traverse up the chain of super-classes; it will invoke the first method called swim and stop its traversal."

What are collaborator objects?
