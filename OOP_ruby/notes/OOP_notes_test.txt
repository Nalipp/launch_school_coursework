What are an objects *states and *behaviors?
  States are the values of an objects *attributes.
  Behaviors are what the object is capable of.

  Two different objects with different states are *instances of the same object class.
  They share the same behaviors and *instance methods of the class.

  Instance variables keep track of state.
  Instance methods expose the behaviors for the object.

What is the initialize method?
  The initialize method is a *constructor that is triggered whenever a new object is created.
  Initialize is an instance method.
  New is a class method.

What are instance variables
  Instance variables starts with '@' and is one of the ways to track of the state of an object.
  Each object has a unique state and an instance variable is how we keep track.

What is an instance method?
  An instance method is a a behavior of a class.
  It is used to expose information about the state of the object.

What are Accessor Methods?
  Syntactical sugar for getter and setter methods.
    A getter method exposes the value of an instance variable through an instance method.
    Allowing access to an instance variable without the '@'

Why do we need to call self inside of a class instance method, even though we defined getter and setter methods?
  Self tells ruby we are calling a setter method instead of instantiating a new variable specific to the instance method scope.
  Calling self inside an instance method is required for setter methods '=' but not getter methods.


What is the difference between a class method and an instance method?
  Instance methods pertain to the instance or object of a class.
  Class level methods are called directly on the class itself without instantiating any objects.
  Class methods are where we put functionality that does not pertain to individual objects or state.

What is the difference between a class variable and an instance variable?
  When a instance of a class is instantiated it holds unique state.
  A class variable keeps track of class level detail that pertains to the class and not individual objects.

Difference between calling self on an instance method or on the entire class.
  When self is called inside an instance method it is referencing the object that called the method (The calling objects state).
  When self is called outside an instance method it is referencing variables that are related to the entire class.

What is a module?
  A module is encapsulated code that can be re-used by different classes.
  Ruby doesn't allow multiple inheritance from more than one super class but does allow unlimited inheritance from modules.
  Modules are mixed in with the word include.
  Modules naming convention use 'able' after the verb
  Modules are also used for namespacing... Mammal::Dog.new

Class inheritance vs mixin module
  If the class 'is-a' use inheritance
  if the class 'has-a' use mixin module
  Modules can not be instantiated. They are only used for name spacing and grouping common methods together.

What is an object?
  An object belongs to a class, but has it's own state.
  A class is like a mold and each instance of the class has it's own instance variables (data).

What is the method lookup path in Ruby?
  Ruby follows a method lookup chain to find a method.
  If a method isn't in a current class Ruby follows the chain upward until it is found.
  The lookup path can be called with the ancestors method.

What is 'super'?
  Super allows you to call methods up the inheritance hierarchy.
  When you call super from inside a method it will look for a method with the same name up the lookup chain and invoke the method.
  Calling super will return the result of the method that is being looked up.

Private methods
  Private methods are excluded from the objects interface. Other classes in the hierarchy are not able to access the method.
  Private methods are only available from other method calls within the class.
  When calling a private method you can not use self.

Protected methods
  Are an in between approach, they are treated as private from outside the class (same) and public from within the class (they respond to self).

What are collaborator objects
  When an object holds another object in is own state.

What are fake operators?
  Many operators in ruby are actually methods, which is important because they can be re-written with custom functionality.

Truthiness
  In ruby everything is true except false and nil.
  This does not mean if it is not false or nil, it is the same as a true object, just that it evaluates to true.
  A number like 5 evaluates to true but is not equal to true.

How do blocks work?
  The method being called on an array (such as 'each') accepts an argument.
  A block is an argument to a method call.
  The block is being passed into the method.

What is yield?
  Yield is the keyword that executes the block inside a method.
  If there is no block given there is a JumpError so a guard method is 'block_given?'



how blocks work, and when we'd want to use them
how to implement your own each, select, reduce, and map in a custom collection-oriented class




###########################

Blocks and Closures

Closures bind to surrounding artifacts such as variables, methods and objects
Closures are like methods passes around without a defined name attached.

*Closures allow access to non-local variables or binding from outside of the local scope.
*This means you can pass in a closure to a method as a parameter and it will have access to the variables it has binding with.

A second reason for using closures is when we need to write before and after code, or 'sandwich' code.
This is useful when the writer of the method is not sure what code that will be implemented by the
method caller but wants to measure the before and after affect of the block.
